name: electron-setup
on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'
jobs:
  release:
    name: build and release electron app
    # runs-on: windows-latest
    # the type of machine to run the job on
    runs-on: ${{ matrix.os }}

    # create a build matrix for jobs
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0


      - name: Use Node
        uses: actions/setup-node@v3
        with:
          node-version: 16



      - name: Setup Pnpm
        run: npm i -g pnpm


       # 检查和设置 pnpm 缓存
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install
        run: pnpm i

      - name: Clean Upload File
        run: |
          pnpm rimraf "dist_electron"

      #- name: Build
      #  run: pnpm run electron:build
      #  env:
      #      GH_TOKEN: ${{ secrets.GH_TOKEN }}

       # step4: build app for mac/win
      - name: build windows app
        if: matrix.os == 'windows-latest'
        run: |
          pnpm run electron:build-win
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}


      #- name: Upload File
        #uses: actions/upload-artifact@v3
       # with:
          #name: jingluo-window
         # path: dist_electron/*.exe

      - name: ls
        run: |
            cd dist_electron
            ls

      - name: release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist_electron/*
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}

      # Deploy   都采用secrets加密防止外泄
      - name: Deploy
        uses: easingthemes/ssh-deploy@main
        env:
          # 私钥
          SSH_PRIVATE_KEY: ${{ secrets.SSH_ACCESS_TOKEN }}
          # scp参数
          ARGS: "-avz --delete"
          # 源目录，编译后生成的文件目录
          SOURCE: "dist_electron/"
          # 服务器ip：换成你的服务器IP
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          # 用户
          REMOTE_USER: ${{ secrets.SSH_USERNAME }}
           # 目标地址 你在服务器上部署代码的地方
          TARGET: ${{ secrets.SSH_TARGET }}

